//=============================================================================
//
// 地面の処理 [field.cpp]
//
//=============================================================================
#include "main.h"
#include "field.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
FIELD field[MAX_FIELD];		// 地面のワーク

//=============================================================================
// 地面の生成
//=============================================================================
void CreateField(float in_posX, float in_posY, float in_width)
{
	// 地面の最大数分繰り返し
	for (int countField = 0; countField < MAX_FIELD; countField++)
	{
		// 地面が既に生成されているか
		if (field[countField].enable == false)
		{
			// 地面が生成されていないなら生成する
			field[countField].posX = in_posX;
			field[countField].posY = in_posY;
			field[countField].width = in_width;
			field[countField].enable = true;
			break;
		}
	}
}

//=============================================================================
// 地面初期化処理
//=============================================================================
void InitField(void)
{
	// 地面の最大数分繰り返し
	for (int countField = 0; countField < MAX_FIELD; countField++)
	{
		field[countField].posX = 0.0f;
		field[countField].posY = 0.0f;
		field[countField].width = 0.0f;
		field[countField].enable = false;
	}

	// 地面の生成（引数1 : X座標, 引数2 : Y座標, 引数3 : 横幅）
	CreateField(10.0f, 21.0f, 8.0f);
	CreateField(22.0f, 18.0f, 14.0f);
	CreateField(48.0f, 18.0f, 10.0f);
	CreateField(36.0f, 14.0f, 8.0f);
	CreateField(24.0f, 10.0f, 10.0f);
	CreateField(64.0f, 14.0f, 6.0f);
	CreateField(42.0f, 8.0f, 30.0f);
}

//=============================================================================
// 地面終了処理
//=============================================================================
void UninitField(void)
{
}

//=============================================================================
// 地面初期化
//=============================================================================
void UpdateField(void)
{
}

//=============================================================================
// 地面初期化
//=============================================================================
void DrawField(void)
{
	// 色設定
	SetConsoleTextColor(YELLOW);

	// 地面の描画
	SetCursorPosition(2, 25);
	PrintString("□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□", 78);

	// ブロックの描画
	for(int countField = 0; countField < MAX_FIELD; countField++)
	{
		if(field[countField].enable)
		{
			SetCursorPosition((int)field[countField].posX, (int)field[countField].posY);
			for(int countBlock = 0; countBlock < (int)field[countField].width / 2; countBlock++)
			{
				PrintString("□", 2);
			}
		}
	}
}

//=============================================================================
// 地面の取得
//=============================================================================
FIELD *GetField(void)
{
	return &field[0];
}

/**
 * @copyright (c) 2018-2021 HAL Osaka College of Technology & Design (Ihara, H.)
 */
